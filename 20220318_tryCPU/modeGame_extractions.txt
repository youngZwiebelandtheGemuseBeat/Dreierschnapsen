Draußen:

if (i > 3) // exit condition: 20 or 40 shown only - enough & exit
{
  printf("points caller: %d\n", points_call);
  printf("points opponents: %d\n", points_opponents);
  break;
}
// --------------------------------------------------------------------------------

i = 0;

next_and_points = next(initial_order, player,
                       hands[player[i] MINUS_ONE][position[i]],
                       (hands)[player[i + 1] MINUS_ONE][position[i + 1]],
                       (hands)[player[i + 2] MINUS_ONE][position[i + 2]]);

start = next_and_points.winner_; // retournier'I auf next_and_points.caller_

getCall(start, &call, &answer_1, &answer_2);

// reset (points) for next round
points[0] = 0;
points[1] = 0;
points[2] = 0;
pairs = resetPairs(position_Q);
resetHandlePairs(handle_pairs);
points_pair = 0;
next_and_points.points_ = 0;
next_and_points.winner_ = 0;
next_and_points.caller_ = 0;
bool_trumped_already = FALSE;

if (points_call >= 66)
{
//      points_and_caller = {};
  break;
}

else if (points_opponents >= 66)
{
//      points_and_caller = {};
  break;
}

// who has played the highest card calls next - and exactly this is the bitch here

// may we do this here -----------------------
removeCard(&hands[player[i] MINUS_ONE][position[i]]);
removeCard(&hands[player[i + 1] MINUS_ONE][position[i + 1]]);
removeCard(&hands[player[i + 2] MINUS_ONE][position[i + 2]]);
// -------------------------------------------
// write all left over cards onto commands

// player 1
counter_position = 0 ;
for (counter_cards = 0; counter_cards < HAND; counter_cards++)
{
  if ((hands)[player[i] MINUS_ONE][counter_cards].suit_ != NULL)
  {
    players_commands[i][counter_position] = commands[counter_cards];
    counter_position++;
  }
}
players_commands[i][counter_position] = '\0';

// player 2
counter_position = 0 ;
for (counter_cards = 0; counter_cards < HAND; counter_cards++)
{
  if ((hands)[player[i + 1] MINUS_ONE][counter_cards].suit_ != NULL)
  {
    players_commands[i + 1][counter_position] = commands[counter_cards];
    counter_position++;
  }
}
players_commands[i + 1][counter_position] = '\0';

// player 3
counter_position = 0 ;
for (counter_cards = 0; counter_cards < HAND; counter_cards++)
{
  if ((hands)[player[i + 2] MINUS_ONE][counter_cards].suit_ != NULL)
  {
    players_commands[i + 2][counter_position] = commands[counter_cards];
    counter_position++;
  }
}
players_commands[i + 2][counter_position] = '\0';
// -------------------------------------------

// sort players' order
//    getCall(start, &call, &answer_1, &answer_2); -> copied to 3771

player[0] = call;
player[1] = answer_1;
player[2] = answer_2;


if (player[0] == TURN_PLAYER_1)
{
  players_commands[0] = commands_1;
  players_commands[1] = commands_2;
  players_commands[2] = commands_3;
}

if (player[0] == TURN_PLAYER_2)
{
  players_commands[0] = commands_2;
  players_commands[1] = commands_3;
  players_commands[2] = commands_1;
}

if (player[0] == TURN_PLAYER_3)
{
  players_commands[0] = commands_3;
  players_commands[1] = commands_1;
  players_commands[2] = commands_2;
}

// print points
printf("player:  %d\nopponents:  %d\n", points_call, points_opponents);

} // end for()

// TODO: letzter Stuch bringt nix .. Call < 66 = TOT

points_and_caller.caller_ = TURN_PLAYER_1;

if (points_call < 66)
{
if (points_call == 0)
{
  printf("Opponents win 3 points!\n");
  printf("---------------------------------------------------------------\n");
  points_and_caller.points_ = 3;
  // points_and_caller.caller_ = IRGENDWER;
  points_and_caller.winner_ = OPPONENTS_WIN;
  return points_and_caller;
}

else if (points_call < 33)
{
  printf("Opponents win 2 points!\n");
  printf("---------------------------------------------------------------\n");
  points_and_caller.points_ = 2;
  // points_and_caller.caller_ = IRGENDWER;
  points_and_caller.winner_ = OPPONENTS_WIN;
  return points_and_caller;
}

else /*if (points_call > 33)*/
{
  printf("Opponents win 1 points!\n");
  printf("---------------------------------------------------------------\n");
  points_and_caller.points_ = 1;
  // points_and_caller.caller_ = IRGENDWER;
  points_and_caller.winner_ = OPPONENTS_WIN;
  return points_and_caller;
}
}

else /* caller wins (modeGame() = player 1) */
{
if (points_opponents == 0)
{
  printf("Player %d wins 3 points!\n", buffer_start);
  printf("---------------------------------------------------------------\n");
  points_and_caller.points_ = 3;
  points_and_caller.winner_ = TURN_PLAYER_1 /*buffer_start*/;
  return points_and_caller;
}

else if (points_opponents < 33)
{
  printf("Player %d wins 2 points!\n", buffer_start);
  printf("---------------------------------------------------------------\n");
  points_and_caller.points_ = 2;
  points_and_caller.winner_ = TURN_PLAYER_1;
  return points_and_caller;
}

else /*if (points_opponent > 33)*/
{
  printf("Player %d wins 1 points!\n", buffer_start);
  printf("---------------------------------------------------------------\n");
  points_and_caller.points_ = 1;
  points_and_caller.winner_ = TURN_PLAYER_1;
  return points_and_caller;
}
}


      // further playing
      else if (i != 0 && i < 3)
      {
        // -----------
        
        // rewind bock
        if (hands[player[i] MINUS_ONE][0].is_bock_ == TRUE) // hard coded 0 sollte passen
                                                            // zumal: ein bock: alle bock
        {
          for (counter_cards = 0; counter_cards < HAND; counter_cards++)
          {
            hands[player[i] MINUS_ONE][counter_cards].is_bock_ = FALSE;
          }
        }

        // check position(s) of valid cards for this round
        // do not allow any other card
        // delete non valid characters from commands
        count_bock    = 0;   // bock
        count_suit    = 0;   // right suit
        count_trump   = 0;   // trump
        
        // seek
        for (counter_cards = 0; counter_cards < (HAND/* - counter_turns*/);
             counter_cards++)
        {
          // have trump
          if ((hands)[player[i] MINUS_ONE][counter_cards].is_trump_ == TRUE)
          {
//            if ((hands)[player[i] MINUS_ONE][counter_cards].is_trump_)
            count_trump++;
          }
        }
        
        for (counter_cards = 0; counter_cards < (HAND/* - counter_turns*/);
             counter_cards++)
        {
          // right suit
          if (i == 1)
          {
            if ((hands)[player[i] MINUS_ONE][counter_cards].suit_
                == (hands)[player[i - 1] MINUS_ONE][position[i - 1]].suit_)
            {
              // rigtht suit is trump (: trump has been played )
              if (hands[player[i] MINUS_ONE][counter_cards].is_trump_ == TRUE)
              {
                count_trump--;
              }
              count_suit++;
            }
          }
          
          else /* if (i == 2) */
          {
            if ((hands)[player[i] MINUS_ONE][counter_cards].suit_
                == (hands)[player[i - 2] MINUS_ONE][position[i - 2]].suit_)
            {
              // rigtht suit is trump (: trump has been played )
              if (hands[player[i] MINUS_ONE][counter_cards].is_trump_ == TRUE)
              {
                count_trump--;
              }
              count_suit++;
            }
          }
        }
        
        for (counter_cards = 0; counter_cards < (HAND/* - counter_turns*/);
             counter_cards++)
        {
          // no trump && no suit = all bock
          if (i == 1)
          {
            if ((hands)[player[i] MINUS_ONE][counter_cards].is_trump_ == FALSE
                && (hands)[player[i] MINUS_ONE][counter_cards].suit_
                != (hands)[player[i - 1] MINUS_ONE][position[i - 1]].suit_)
            {
              count_bock++;
            }
          }
          
          else /* if (i == 2) */
          {
            if ((hands)[player[i] MINUS_ONE][counter_cards].is_trump_ == FALSE
                && (hands)[player[i] MINUS_ONE][counter_cards].suit_
                != (hands)[player[i - 2] MINUS_ONE][position[i - 2]].suit_)
            {
              count_bock++;
            }
          }
        }
        
        // .. and adjust ------------
        strcpy(players_commands[i], "000000");    // maybe there is a better
                                                  // more professinal way
        
        counter_trump   = 0;
        counter_suit    = 0;
        counter_cards   = 0;
        counter_hand    = 0;
        counter_command = 0;
        
        // all bock - no matter which answer
        if ((count_suit == 0 && count_trump == 0))
        {
          // according to turn, -1
//          printf("Alles Bock!\n");
          while (counter_hand < (HAND))
          {
            if ((hands)[player[i] MINUS_ONE][counter_hand].suit_ != NULL)
            {
              players_commands[i][counter_cards] = commands[counter_command];
              counter_command++;
              counter_cards++;
            }
            
            else
            {
              counter_command++;
            }
            
            counter_hand++;
          }
        }
        
        // no valid suit but at least one trump
        else if (count_suit == 0 && count_trump > 0)
        {
          counter_trump   = 0;
          counter_suit    = 0;
          counter_cards   = 0;
          counter_hand    = 0;
          counter_command = 0;
          // must hold trump
          // allow trump(s)
//          printf("Muaßt an Trumpf spiel'n!\n");

          while (counter_hand < (HAND/* - counter_turns*/)/* eben nicht strlen(players_commands[i])*/)
          {
            // differenciate between answer 1 and answer 2
            // answer 1 must trump call & answer 2 must trump either
            if ((hands)[player[i] MINUS_ONE][counter_hand].suit_ != NULL
                && hands[player[i] MINUS_ONE][counter_hand].is_trump_ == TRUE)
            {
              players_commands[i][counter_cards] = commands[counter_command];
              counter_command++;
              counter_cards++;
            }
            
            else
            {
              counter_command++;
            }
            
            counter_hand++;
          }
          
          // remove right
          for (counter_cards = count_trump; counter_cards < (HAND/* - counter_turns*/); counter_cards++)
          {
            players_commands[i][counter_cards] = '\0';
          }
        } // end else if (must play trump)
        
        else /* must hold suit, at leas one */
        {
//          printf("Muaßt Farb' spielen!\n");
          counter_cards = 0;
          counter_command = 0;
          
          // remove left
          for (counter_hand = 0; counter_hand < (HAND/* - counter_turns*/); counter_hand++)
          {
            // suit found
            if (i == 1)   // first to answer
            {
              if ((hands)[player[i] MINUS_ONE][counter_hand].suit_
                  == (hands)[player[i - 1] MINUS_ONE][position[i - 1]].suit_)
              {
//                printf("gleiche Farbe @ %d\n", counter_hand);
//                printf("%c = %c\n", players_commands[i][counter_hand], commands[counter_command]);
                players_commands[i][counter_cards] = commands[counter_command];
                counter_command++;
                counter_cards++;
              }
              else
              {
                counter_command++;
              }
            }
            
            else /* (i == 1) */   // second to answer
            {
              if ((hands)[player[i] MINUS_ONE][counter_hand].suit_
                  == (hands)[player[i - 2] MINUS_ONE][position[i - 2]].suit_)
              {
//                printf("gleiche Farbe @ %d\n", counter_hand);
                players_commands[i][counter_cards] = commands[counter_command];
                counter_command++;
                counter_cards++;
              }
              else
              {
//                players_commands[i][counter_hand] = commands[counter_command];
                counter_command++;
              }
            }
          }
          
          // remove right
          for (counter_cards = count_suit; counter_cards < (HAND/* - counter_turns*/); counter_cards++)
          {
            players_commands[i][counter_cards] = '\0';
          }
        } // end else (must play suit)
        
        // now that we have found valid cards, go on and only allow permitted cards
        // we do not have to mind case:     all bock
        // but                              trump (in case trump has been played)
        //                                  suit
        // what do we need? - (answer 1): called card's value
        //                    (answer 2): called card's value and answer 1's value
        
        if (i == 1)
        {
          // if there is at least one valid card to answer with
          if (!(count_suit == 0 && count_trump == 0))
          {
            // compare values and only allow weaker cards if there is not one
            // which could trump call
            counter_command = 0;
            counter_cards   = 0;
            count_permit    = 0;
            
            if (count_suit > 0)
            {
              while (players_commands[i][counter_command] != '\0')
              {
                if ((hands)[player[i] MINUS_ONE][counter_cards].value_ >
                    /* called card */ hands[player[0] MINUS_ONE][position[0]].value_)
                {
                  printf("%s %d - %s %d\n", hands[player[0] MINUS_ONE][position[0]].suit_,
                         hands[player[0] MINUS_ONE][position[0]].value_,
                         (hands)[player[i] MINUS_ONE][counter_cards].suit_,
                         (hands)[player[i] MINUS_ONE][counter_cards].value_);
                  buffer_higher[counter_cards] = players_commands[i][counter_cards];
                  buffer_higher[counter_cards ADD_ONE] = '\0';
                  counter_cards++;
                  
                  if (player[0] == initial_order[0])
                  {
                    bool_trumped_already = TRUE;
                  }
                }
                counter_command++;
              }
            }
            
            if (counter_cards > 0)
            {
              strcpy(players_commands[i], "\0\0\0\0\0\0");
              strcpy(players_commands[i], buffer_higher);
              strcpy(buffer_higher, "\0\0\0\0\0\0");
            }
          }
        }
        
        else /* if (i == 2) */
        {
          // if there is at least one valid card to answer with
          if (!(count_suit == 0 && count_trump == 0))
          {
            // compare values and only allow weaker cards if there is not one
            // which could trump any (call || answer 1)
            counter_command = 0;
            counter_cards   = 0;
            count_permit    = 0;
            
            if (count_suit > 0)
            {
              if (bool_trumped_already == FALSE)
              {
                while (players_commands[i][counter_command] != '\0')
                {
                  // has to trump caller if possible
                  if ((hands)[player[i] MINUS_ONE][counter_cards].value_ <
                      /* called card */ hands[player[0] MINUS_ONE][position[0]].value_
                      || (hands)[player[i] MINUS_ONE][counter_cards].value_ <
                      /* answer 1's card */ hands[player[i - 1] MINUS_ONE][position[1/*0*/]].value_)
                  {

                  }
                  else
                  {
                    buffer_higher[counter_cards] = players_commands[i][counter_cards];
                    buffer_higher[counter_cards ADD_ONE] = '\0';
                    counter_cards++;
                  }
                counter_command++;
                }
              }

              else
              {
                // no need to trump caller
              }
            }
            
            else if (count_trump > 0)
            {
//              printf("%d\n", (hands)[player[i] MINUS_ONE][position[i MINUS_ONE]].is_trump_);
              if ((hands)[player[i] MINUS_ONE][position[i MINUS_ONE]].is_trump_)
              {
                while (players_commands[i][counter_command] != '\0')
                {
                  // only need to compare trump's value with answer 1
                  if ((hands)[player[i] MINUS_ONE][counter_cards].value_ <
                      /* answer 1's card */ hands[player[i MINUS_ONE] MINUS_ONE][position[i MINUS_ONE]].value_)
                  {
                    printf("\n!!! 3622 !!!\n");
                  }
                  else
                  {
                    buffer_higher[counter_cards] = players_commands[i][counter_cards];
                    buffer_higher[counter_cards ADD_ONE] = '\0';
                    counter_cards++;
                  }
                  counter_command++;
                }
              }
            }
            
            if (counter_cards > 0)
            {
              strcpy(players_commands[i], "\0\0\0\0\0\0");
              strcpy(players_commands[i], buffer_higher);
              strcpy(buffer_higher, "\0\0\0\0\0\0");
            }
          }
        }
        
        // -----------
